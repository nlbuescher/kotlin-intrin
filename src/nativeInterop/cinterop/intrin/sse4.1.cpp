#include <smmintrin.h>

#include <functional>
#include <unordered_map>

#include "sse4.1.h"

using namespace std;

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wignored-attributes"

namespace blend_epi16 {
	const unordered_map<int8_t, function<__m128i(__m128i, __m128i)>> map{
		{0x00, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x00); }},
		{0x01, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x01); }},
		{0x02, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x02); }},
		{0x03, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x03); }},
		{0x04, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x04); }},
		{0x05, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x05); }},
		{0x06, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x06); }},
		{0x07, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x07); }},
		{0x08, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x08); }},
		{0x09, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x09); }},
		{0x0A, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x0A); }},
		{0x0B, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x0B); }},
		{0x0C, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x0C); }},
		{0x0D, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x0D); }},
		{0x0E, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x0E); }},
		{0x0F, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x0F); }},
		{0x10, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x10); }},
		{0x11, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x11); }},
		{0x12, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x12); }},
		{0x13, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x13); }},
		{0x14, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x14); }},
		{0x15, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x15); }},
		{0x16, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x16); }},
		{0x17, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x17); }},
		{0x18, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x18); }},
		{0x19, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x19); }},
		{0x1A, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x1A); }},
		{0x1B, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x1B); }},
		{0x1C, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x1C); }},
		{0x1D, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x1D); }},
		{0x1E, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x1E); }},
		{0x1F, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x1F); }},
		{0x20, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x20); }},
		{0x21, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x21); }},
		{0x22, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x22); }},
		{0x23, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x23); }},
		{0x24, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x24); }},
		{0x25, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x25); }},
		{0x26, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x26); }},
		{0x27, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x27); }},
		{0x28, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x28); }},
		{0x29, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x29); }},
		{0x2A, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x2A); }},
		{0x2B, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x2B); }},
		{0x2C, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x2C); }},
		{0x2D, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x2D); }},
		{0x2E, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x2E); }},
		{0x2F, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x2F); }},
		{0x30, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x30); }},
		{0x31, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x31); }},
		{0x32, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x32); }},
		{0x33, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x33); }},
		{0x34, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x34); }},
		{0x35, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x35); }},
		{0x36, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x36); }},
		{0x37, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x37); }},
		{0x38, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x38); }},
		{0x39, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x39); }},
		{0x3A, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x3A); }},
		{0x3B, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x3B); }},
		{0x3C, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x3C); }},
		{0x3D, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x3D); }},
		{0x3E, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x3E); }},
		{0x3F, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x3F); }},
		{0x40, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x40); }},
		{0x41, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x41); }},
		{0x42, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x42); }},
		{0x43, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x43); }},
		{0x44, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x44); }},
		{0x45, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x45); }},
		{0x46, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x46); }},
		{0x47, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x47); }},
		{0x48, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x48); }},
		{0x49, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x49); }},
		{0x4A, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x4A); }},
		{0x4B, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x4B); }},
		{0x4C, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x4C); }},
		{0x4D, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x4D); }},
		{0x4E, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x4E); }},
		{0x4F, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x4F); }},
		{0x50, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x50); }},
		{0x51, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x51); }},
		{0x52, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x52); }},
		{0x53, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x53); }},
		{0x54, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x54); }},
		{0x55, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x55); }},
		{0x56, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x56); }},
		{0x57, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x57); }},
		{0x58, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x58); }},
		{0x59, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x59); }},
		{0x5A, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x5A); }},
		{0x5B, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x5B); }},
		{0x5C, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x5C); }},
		{0x5D, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x5D); }},
		{0x5E, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x5E); }},
		{0x5F, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x5F); }},
		{0x60, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x60); }},
		{0x61, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x61); }},
		{0x62, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x62); }},
		{0x63, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x63); }},
		{0x64, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x64); }},
		{0x65, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x65); }},
		{0x66, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x66); }},
		{0x67, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x67); }},
		{0x68, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x68); }},
		{0x69, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x69); }},
		{0x6A, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x6A); }},
		{0x6B, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x6B); }},
		{0x6C, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x6C); }},
		{0x6D, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x6D); }},
		{0x6E, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x6E); }},
		{0x6F, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x6F); }},
		{0x70, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x70); }},
		{0x71, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x71); }},
		{0x72, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x72); }},
		{0x73, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x73); }},
		{0x74, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x74); }},
		{0x75, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x75); }},
		{0x76, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x76); }},
		{0x77, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x77); }},
		{0x78, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x78); }},
		{0x79, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x79); }},
		{0x7A, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x7A); }},
		{0x7B, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x7B); }},
		{0x7C, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x7C); }},
		{0x7D, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x7D); }},
		{0x7E, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x7E); }},
		{0x7F, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x7F); }},
		{0x80, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x80); }},
		{0x81, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x81); }},
		{0x82, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x82); }},
		{0x83, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x83); }},
		{0x84, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x84); }},
		{0x85, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x85); }},
		{0x86, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x86); }},
		{0x87, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x87); }},
		{0x88, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x88); }},
		{0x89, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x89); }},
		{0x8A, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x8A); }},
		{0x8B, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x8B); }},
		{0x8C, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x8C); }},
		{0x8D, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x8D); }},
		{0x8E, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x8E); }},
		{0x8F, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x8F); }},
		{0x90, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x90); }},
		{0x91, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x91); }},
		{0x92, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x92); }},
		{0x93, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x93); }},
		{0x94, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x94); }},
		{0x95, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x95); }},
		{0x96, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x96); }},
		{0x97, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x97); }},
		{0x98, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x98); }},
		{0x99, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x99); }},
		{0x9A, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x9A); }},
		{0x9B, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x9B); }},
		{0x9C, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x9C); }},
		{0x9D, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x9D); }},
		{0x9E, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x9E); }},
		{0x9F, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0x9F); }},
		{0xA0, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xA0); }},
		{0xA1, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xA1); }},
		{0xA2, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xA2); }},
		{0xA3, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xA3); }},
		{0xA4, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xA4); }},
		{0xA5, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xA5); }},
		{0xA6, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xA6); }},
		{0xA7, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xA7); }},
		{0xA8, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xA8); }},
		{0xA9, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xA9); }},
		{0xAA, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xAA); }},
		{0xAB, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xAB); }},
		{0xAC, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xAC); }},
		{0xAD, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xAD); }},
		{0xAE, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xAE); }},
		{0xAF, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xAF); }},
		{0xB0, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xB0); }},
		{0xB1, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xB1); }},
		{0xB2, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xB2); }},
		{0xB3, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xB3); }},
		{0xB4, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xB4); }},
		{0xB5, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xB5); }},
		{0xB6, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xB6); }},
		{0xB7, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xB7); }},
		{0xB8, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xB8); }},
		{0xB9, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xB9); }},
		{0xBA, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xBA); }},
		{0xBB, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xBB); }},
		{0xBC, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xBC); }},
		{0xBD, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xBD); }},
		{0xBE, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xBE); }},
		{0xBF, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xBF); }},
		{0xC0, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xC0); }},
		{0xC1, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xC1); }},
		{0xC2, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xC2); }},
		{0xC3, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xC3); }},
		{0xC4, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xC4); }},
		{0xC5, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xC5); }},
		{0xC6, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xC6); }},
		{0xC7, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xC7); }},
		{0xC8, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xC8); }},
		{0xC9, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xC9); }},
		{0xCA, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xCA); }},
		{0xCB, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xCB); }},
		{0xCC, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xCC); }},
		{0xCD, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xCD); }},
		{0xCE, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xCE); }},
		{0xCF, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xCF); }},
		{0xD0, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xD0); }},
		{0xD1, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xD1); }},
		{0xD2, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xD2); }},
		{0xD3, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xD3); }},
		{0xD4, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xD4); }},
		{0xD5, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xD5); }},
		{0xD6, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xD6); }},
		{0xD7, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xD7); }},
		{0xD8, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xD8); }},
		{0xD9, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xD9); }},
		{0xDA, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xDA); }},
		{0xDB, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xDB); }},
		{0xDC, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xDC); }},
		{0xDD, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xDD); }},
		{0xDE, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xDE); }},
		{0xDF, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xDF); }},
		{0xE0, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xE0); }},
		{0xE1, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xE1); }},
		{0xE2, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xE2); }},
		{0xE3, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xE3); }},
		{0xE4, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xE4); }},
		{0xE5, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xE5); }},
		{0xE6, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xE6); }},
		{0xE7, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xE7); }},
		{0xE8, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xE8); }},
		{0xE9, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xE9); }},
		{0xEA, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xEA); }},
		{0xEB, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xEB); }},
		{0xEC, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xEC); }},
		{0xED, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xED); }},
		{0xEE, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xEE); }},
		{0xEF, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xEF); }},
		{0xF0, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xF0); }},
		{0xF1, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xF1); }},
		{0xF2, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xF2); }},
		{0xF3, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xF3); }},
		{0xF4, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xF4); }},
		{0xF5, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xF5); }},
		{0xF6, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xF6); }},
		{0xF7, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xF7); }},
		{0xF8, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xF8); }},
		{0xF9, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xF9); }},
		{0xFA, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xFA); }},
		{0xFB, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xFB); }},
		{0xFC, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xFC); }},
		{0xFD, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xFD); }},
		{0xFE, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xFE); }},
		{0xFF, [](__m128i a, __m128i b) { return _mm_blend_epi16(a, b, 0xFF); }},
	};
} // namespace blend_epi16
__m128i sse4_1_blend_epi16(__m128i a, __m128i b, const int8_t imm8) { return blend_epi16::map.at(imm8)(a, b); }
namespace blend_pd {
	const unordered_map<int8_t, function<__m128d(__m128d, __m128d)>> map{
		{0, [](__m128d a, __m128d b) { return _mm_blend_pd(a, b, 0); }},
		{1, [](__m128d a, __m128d b) { return _mm_blend_pd(a, b, 1); }},
		{2, [](__m128d a, __m128d b) { return _mm_blend_pd(a, b, 2); }},
		{3, [](__m128d a, __m128d b) { return _mm_blend_pd(a, b, 3); }},
	};
} // namespace blend_pd
__m128d sse4_1_blend_pd(__m128d a, __m128d b, const int8_t imm8) { return blend_pd::map.at(imm8 & 0x3)(a, b); }
namespace blend_ps {
	const unordered_map<int8_t, function<__m128(__m128, __m128)>> map{
		{0, [](__m128 a, __m128 b) { return _mm_blend_ps(a, b, 0); }},
		{1, [](__m128 a, __m128 b) { return _mm_blend_ps(a, b, 1); }},
		{2, [](__m128 a, __m128 b) { return _mm_blend_ps(a, b, 2); }},
		{3, [](__m128 a, __m128 b) { return _mm_blend_ps(a, b, 3); }},
		{4, [](__m128 a, __m128 b) { return _mm_blend_ps(a, b, 4); }},
		{5, [](__m128 a, __m128 b) { return _mm_blend_ps(a, b, 5); }},
		{6, [](__m128 a, __m128 b) { return _mm_blend_ps(a, b, 6); }},
		{7, [](__m128 a, __m128 b) { return _mm_blend_ps(a, b, 7); }},
	};
} // namespace blend_ps
__m128 sse4_1_blend_ps(__m128 a, __m128 b, const int8_t imm8) { return blend_ps::map.at(imm8 & 0x7)(a, b); }
__m128i sse4_1_blendv_epi8(__m128i a, __m128i b, __m128i mask) { return _mm_blendv_epi8(a, b, mask); }
__m128d sse4_1_blendv_pd(__m128d a, __m128d b, __m128d mask) { return _mm_blendv_pd(a, b, mask); }
__m128 sse4_1_blendv_ps(__m128 a, __m128 b, __m128 mask) { return _mm_blendv_ps(a, b, mask); }
__m128d sse4_1_ceil_pd(__m128d a) { return _mm_ceil_pd(a); }
__m128 sse4_1_ceil_ps(__m128 a) { return _mm_ceil_ps(a); }
__m128d sse4_1_ceil_sd(__m128d a, __m128d b) { return _mm_ceil_sd(a, b); }
__m128 sse4_1_ceil_ss(__m128 a, __m128 b) { return _mm_ceil_ss(a, b); }
__m128i sse4_1_cmpeq_epi64(__m128i a, __m128i b) { return _mm_cmpeq_epi64(a, b); }
__m128i sse4_1_cvtepi16_epi32(__m128i a) { return _mm_cvtepi16_epi32(a); }
__m128i sse4_1_cvtepi16_epi64(__m128i a) { return _mm_cvtepi16_epi64(a); }
__m128i sse4_1_cvtepi32_epi64(__m128i a) { return _mm_cvtepi32_epi64(a); }
__m128i sse4_1_cvtepi8_epi16(__m128i a) { return _mm_cvtepi8_epi16(a); }
__m128i sse4_1_cvtepi8_epi32(__m128i a) { return _mm_cvtepi8_epi32(a); }
__m128i sse4_1_cvtepi8_epi64(__m128i a) { return _mm_cvtepi8_epi64(a); }
__m128i sse4_1_cvtepu16_epi32(__m128i a) { return _mm_cvtepu16_epi32(a); }
__m128i sse4_1_cvtepu16_epi64(__m128i a) { return _mm_cvtepu16_epi64(a); }
__m128i sse4_1_cvtepu32_epi64(__m128i a) { return _mm_cvtepu32_epi64(a); }
__m128i sse4_1_cvtepu8_epi16(__m128i a) { return _mm_cvtepu8_epi16(a); }
__m128i sse4_1_cvtepu8_epi32(__m128i a) { return _mm_cvtepu8_epi32(a); }
__m128i sse4_1_cvtepu8_epi64(__m128i a) { return _mm_cvtepu8_epi64(a); }
namespace dp_pd {
	const unordered_map<int8_t, function<__m128d(__m128d, __m128d)>> map{
		{0x00, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x00); }},
		{0x01, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x01); }},
		{0x02, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x02); }},
		{0x03, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x03); }},
		{0x04, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x04); }},
		{0x05, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x05); }},
		{0x06, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x06); }},
		{0x07, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x07); }},
		{0x08, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x08); }},
		{0x09, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x09); }},
		{0x0A, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x0A); }},
		{0x0B, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x0B); }},
		{0x0C, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x0C); }},
		{0x0D, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x0D); }},
		{0x0E, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x0E); }},
		{0x0F, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x0F); }},
		{0x10, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x10); }},
		{0x11, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x11); }},
		{0x12, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x12); }},
		{0x13, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x13); }},
		{0x14, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x14); }},
		{0x15, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x15); }},
		{0x16, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x16); }},
		{0x17, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x17); }},
		{0x18, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x18); }},
		{0x19, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x19); }},
		{0x1A, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x1A); }},
		{0x1B, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x1B); }},
		{0x1C, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x1C); }},
		{0x1D, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x1D); }},
		{0x1E, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x1E); }},
		{0x1F, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x1F); }},
		{0x20, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x20); }},
		{0x21, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x21); }},
		{0x22, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x22); }},
		{0x23, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x23); }},
		{0x24, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x24); }},
		{0x25, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x25); }},
		{0x26, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x26); }},
		{0x27, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x27); }},
		{0x28, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x28); }},
		{0x29, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x29); }},
		{0x2A, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x2A); }},
		{0x2B, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x2B); }},
		{0x2C, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x2C); }},
		{0x2D, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x2D); }},
		{0x2E, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x2E); }},
		{0x2F, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x2F); }},
		{0x30, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x30); }},
		{0x31, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x31); }},
		{0x32, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x32); }},
		{0x33, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x33); }},
		{0x34, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x34); }},
		{0x35, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x35); }},
		{0x36, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x36); }},
		{0x37, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x37); }},
		{0x38, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x38); }},
		{0x39, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x39); }},
		{0x3A, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x3A); }},
		{0x3B, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x3B); }},
		{0x3C, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x3C); }},
		{0x3D, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x3D); }},
		{0x3E, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x3E); }},
		{0x3F, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x3F); }},
		{0x40, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x40); }},
		{0x41, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x41); }},
		{0x42, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x42); }},
		{0x43, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x43); }},
		{0x44, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x44); }},
		{0x45, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x45); }},
		{0x46, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x46); }},
		{0x47, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x47); }},
		{0x48, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x48); }},
		{0x49, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x49); }},
		{0x4A, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x4A); }},
		{0x4B, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x4B); }},
		{0x4C, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x4C); }},
		{0x4D, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x4D); }},
		{0x4E, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x4E); }},
		{0x4F, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x4F); }},
		{0x50, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x50); }},
		{0x51, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x51); }},
		{0x52, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x52); }},
		{0x53, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x53); }},
		{0x54, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x54); }},
		{0x55, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x55); }},
		{0x56, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x56); }},
		{0x57, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x57); }},
		{0x58, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x58); }},
		{0x59, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x59); }},
		{0x5A, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x5A); }},
		{0x5B, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x5B); }},
		{0x5C, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x5C); }},
		{0x5D, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x5D); }},
		{0x5E, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x5E); }},
		{0x5F, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x5F); }},
		{0x60, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x60); }},
		{0x61, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x61); }},
		{0x62, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x62); }},
		{0x63, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x63); }},
		{0x64, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x64); }},
		{0x65, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x65); }},
		{0x66, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x66); }},
		{0x67, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x67); }},
		{0x68, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x68); }},
		{0x69, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x69); }},
		{0x6A, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x6A); }},
		{0x6B, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x6B); }},
		{0x6C, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x6C); }},
		{0x6D, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x6D); }},
		{0x6E, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x6E); }},
		{0x6F, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x6F); }},
		{0x70, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x70); }},
		{0x71, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x71); }},
		{0x72, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x72); }},
		{0x73, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x73); }},
		{0x74, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x74); }},
		{0x75, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x75); }},
		{0x76, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x76); }},
		{0x77, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x77); }},
		{0x78, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x78); }},
		{0x79, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x79); }},
		{0x7A, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x7A); }},
		{0x7B, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x7B); }},
		{0x7C, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x7C); }},
		{0x7D, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x7D); }},
		{0x7E, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x7E); }},
		{0x7F, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x7F); }},
		{0x80, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x80); }},
		{0x81, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x81); }},
		{0x82, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x82); }},
		{0x83, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x83); }},
		{0x84, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x84); }},
		{0x85, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x85); }},
		{0x86, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x86); }},
		{0x87, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x87); }},
		{0x88, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x88); }},
		{0x89, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x89); }},
		{0x8A, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x8A); }},
		{0x8B, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x8B); }},
		{0x8C, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x8C); }},
		{0x8D, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x8D); }},
		{0x8E, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x8E); }},
		{0x8F, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x8F); }},
		{0x90, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x90); }},
		{0x91, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x91); }},
		{0x92, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x92); }},
		{0x93, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x93); }},
		{0x94, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x94); }},
		{0x95, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x95); }},
		{0x96, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x96); }},
		{0x97, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x97); }},
		{0x98, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x98); }},
		{0x99, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x99); }},
		{0x9A, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x9A); }},
		{0x9B, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x9B); }},
		{0x9C, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x9C); }},
		{0x9D, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x9D); }},
		{0x9E, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x9E); }},
		{0x9F, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0x9F); }},
		{0xA0, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xA0); }},
		{0xA1, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xA1); }},
		{0xA2, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xA2); }},
		{0xA3, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xA3); }},
		{0xA4, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xA4); }},
		{0xA5, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xA5); }},
		{0xA6, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xA6); }},
		{0xA7, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xA7); }},
		{0xA8, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xA8); }},
		{0xA9, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xA9); }},
		{0xAA, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xAA); }},
		{0xAB, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xAB); }},
		{0xAC, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xAC); }},
		{0xAD, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xAD); }},
		{0xAE, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xAE); }},
		{0xAF, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xAF); }},
		{0xB0, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xB0); }},
		{0xB1, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xB1); }},
		{0xB2, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xB2); }},
		{0xB3, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xB3); }},
		{0xB4, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xB4); }},
		{0xB5, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xB5); }},
		{0xB6, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xB6); }},
		{0xB7, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xB7); }},
		{0xB8, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xB8); }},
		{0xB9, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xB9); }},
		{0xBA, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xBA); }},
		{0xBB, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xBB); }},
		{0xBC, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xBC); }},
		{0xBD, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xBD); }},
		{0xBE, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xBE); }},
		{0xBF, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xBF); }},
		{0xC0, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xC0); }},
		{0xC1, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xC1); }},
		{0xC2, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xC2); }},
		{0xC3, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xC3); }},
		{0xC4, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xC4); }},
		{0xC5, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xC5); }},
		{0xC6, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xC6); }},
		{0xC7, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xC7); }},
		{0xC8, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xC8); }},
		{0xC9, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xC9); }},
		{0xCA, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xCA); }},
		{0xCB, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xCB); }},
		{0xCC, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xCC); }},
		{0xCD, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xCD); }},
		{0xCE, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xCE); }},
		{0xCF, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xCF); }},
		{0xD0, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xD0); }},
		{0xD1, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xD1); }},
		{0xD2, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xD2); }},
		{0xD3, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xD3); }},
		{0xD4, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xD4); }},
		{0xD5, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xD5); }},
		{0xD6, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xD6); }},
		{0xD7, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xD7); }},
		{0xD8, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xD8); }},
		{0xD9, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xD9); }},
		{0xDA, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xDA); }},
		{0xDB, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xDB); }},
		{0xDC, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xDC); }},
		{0xDD, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xDD); }},
		{0xDE, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xDE); }},
		{0xDF, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xDF); }},
		{0xE0, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xE0); }},
		{0xE1, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xE1); }},
		{0xE2, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xE2); }},
		{0xE3, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xE3); }},
		{0xE4, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xE4); }},
		{0xE5, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xE5); }},
		{0xE6, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xE6); }},
		{0xE7, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xE7); }},
		{0xE8, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xE8); }},
		{0xE9, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xE9); }},
		{0xEA, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xEA); }},
		{0xEB, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xEB); }},
		{0xEC, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xEC); }},
		{0xED, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xED); }},
		{0xEE, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xEE); }},
		{0xEF, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xEF); }},
		{0xF0, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xF0); }},
		{0xF1, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xF1); }},
		{0xF2, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xF2); }},
		{0xF3, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xF3); }},
		{0xF4, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xF4); }},
		{0xF5, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xF5); }},
		{0xF6, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xF6); }},
		{0xF7, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xF7); }},
		{0xF8, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xF8); }},
		{0xF9, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xF9); }},
		{0xFA, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xFA); }},
		{0xFB, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xFB); }},
		{0xFC, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xFC); }},
		{0xFD, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xFD); }},
		{0xFE, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xFE); }},
		{0xFF, [](__m128d a, __m128d b) { return _mm_dp_pd(a, b, 0xFF); }},
	};
} // namespace dp_pd
__m128d sse4_1_dp_pd(__m128d a, __m128d b, const int8_t imm8) { return dp_pd::map.at(imm8)(a, b); }
namespace dp_ps {
	const unordered_map<int8_t, function<__m128(__m128, __m128)>> map{
		{0x00, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x00); }},
		{0x01, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x01); }},
		{0x02, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x02); }},
		{0x03, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x03); }},
		{0x04, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x04); }},
		{0x05, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x05); }},
		{0x06, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x06); }},
		{0x07, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x07); }},
		{0x08, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x08); }},
		{0x09, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x09); }},
		{0x0A, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x0A); }},
		{0x0B, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x0B); }},
		{0x0C, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x0C); }},
		{0x0D, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x0D); }},
		{0x0E, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x0E); }},
		{0x0F, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x0F); }},
		{0x10, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x10); }},
		{0x11, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x11); }},
		{0x12, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x12); }},
		{0x13, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x13); }},
		{0x14, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x14); }},
		{0x15, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x15); }},
		{0x16, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x16); }},
		{0x17, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x17); }},
		{0x18, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x18); }},
		{0x19, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x19); }},
		{0x1A, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x1A); }},
		{0x1B, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x1B); }},
		{0x1C, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x1C); }},
		{0x1D, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x1D); }},
		{0x1E, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x1E); }},
		{0x1F, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x1F); }},
		{0x20, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x20); }},
		{0x21, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x21); }},
		{0x22, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x22); }},
		{0x23, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x23); }},
		{0x24, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x24); }},
		{0x25, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x25); }},
		{0x26, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x26); }},
		{0x27, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x27); }},
		{0x28, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x28); }},
		{0x29, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x29); }},
		{0x2A, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x2A); }},
		{0x2B, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x2B); }},
		{0x2C, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x2C); }},
		{0x2D, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x2D); }},
		{0x2E, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x2E); }},
		{0x2F, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x2F); }},
		{0x30, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x30); }},
		{0x31, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x31); }},
		{0x32, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x32); }},
		{0x33, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x33); }},
		{0x34, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x34); }},
		{0x35, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x35); }},
		{0x36, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x36); }},
		{0x37, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x37); }},
		{0x38, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x38); }},
		{0x39, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x39); }},
		{0x3A, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x3A); }},
		{0x3B, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x3B); }},
		{0x3C, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x3C); }},
		{0x3D, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x3D); }},
		{0x3E, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x3E); }},
		{0x3F, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x3F); }},
		{0x40, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x40); }},
		{0x41, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x41); }},
		{0x42, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x42); }},
		{0x43, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x43); }},
		{0x44, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x44); }},
		{0x45, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x45); }},
		{0x46, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x46); }},
		{0x47, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x47); }},
		{0x48, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x48); }},
		{0x49, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x49); }},
		{0x4A, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x4A); }},
		{0x4B, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x4B); }},
		{0x4C, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x4C); }},
		{0x4D, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x4D); }},
		{0x4E, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x4E); }},
		{0x4F, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x4F); }},
		{0x50, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x50); }},
		{0x51, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x51); }},
		{0x52, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x52); }},
		{0x53, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x53); }},
		{0x54, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x54); }},
		{0x55, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x55); }},
		{0x56, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x56); }},
		{0x57, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x57); }},
		{0x58, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x58); }},
		{0x59, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x59); }},
		{0x5A, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x5A); }},
		{0x5B, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x5B); }},
		{0x5C, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x5C); }},
		{0x5D, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x5D); }},
		{0x5E, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x5E); }},
		{0x5F, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x5F); }},
		{0x60, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x60); }},
		{0x61, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x61); }},
		{0x62, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x62); }},
		{0x63, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x63); }},
		{0x64, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x64); }},
		{0x65, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x65); }},
		{0x66, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x66); }},
		{0x67, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x67); }},
		{0x68, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x68); }},
		{0x69, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x69); }},
		{0x6A, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x6A); }},
		{0x6B, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x6B); }},
		{0x6C, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x6C); }},
		{0x6D, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x6D); }},
		{0x6E, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x6E); }},
		{0x6F, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x6F); }},
		{0x70, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x70); }},
		{0x71, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x71); }},
		{0x72, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x72); }},
		{0x73, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x73); }},
		{0x74, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x74); }},
		{0x75, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x75); }},
		{0x76, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x76); }},
		{0x77, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x77); }},
		{0x78, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x78); }},
		{0x79, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x79); }},
		{0x7A, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x7A); }},
		{0x7B, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x7B); }},
		{0x7C, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x7C); }},
		{0x7D, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x7D); }},
		{0x7E, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x7E); }},
		{0x7F, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x7F); }},
		{0x80, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x80); }},
		{0x81, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x81); }},
		{0x82, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x82); }},
		{0x83, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x83); }},
		{0x84, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x84); }},
		{0x85, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x85); }},
		{0x86, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x86); }},
		{0x87, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x87); }},
		{0x88, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x88); }},
		{0x89, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x89); }},
		{0x8A, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x8A); }},
		{0x8B, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x8B); }},
		{0x8C, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x8C); }},
		{0x8D, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x8D); }},
		{0x8E, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x8E); }},
		{0x8F, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x8F); }},
		{0x90, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x90); }},
		{0x91, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x91); }},
		{0x92, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x92); }},
		{0x93, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x93); }},
		{0x94, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x94); }},
		{0x95, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x95); }},
		{0x96, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x96); }},
		{0x97, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x97); }},
		{0x98, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x98); }},
		{0x99, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x99); }},
		{0x9A, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x9A); }},
		{0x9B, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x9B); }},
		{0x9C, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x9C); }},
		{0x9D, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x9D); }},
		{0x9E, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x9E); }},
		{0x9F, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0x9F); }},
		{0xA0, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xA0); }},
		{0xA1, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xA1); }},
		{0xA2, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xA2); }},
		{0xA3, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xA3); }},
		{0xA4, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xA4); }},
		{0xA5, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xA5); }},
		{0xA6, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xA6); }},
		{0xA7, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xA7); }},
		{0xA8, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xA8); }},
		{0xA9, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xA9); }},
		{0xAA, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xAA); }},
		{0xAB, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xAB); }},
		{0xAC, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xAC); }},
		{0xAD, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xAD); }},
		{0xAE, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xAE); }},
		{0xAF, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xAF); }},
		{0xB0, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xB0); }},
		{0xB1, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xB1); }},
		{0xB2, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xB2); }},
		{0xB3, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xB3); }},
		{0xB4, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xB4); }},
		{0xB5, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xB5); }},
		{0xB6, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xB6); }},
		{0xB7, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xB7); }},
		{0xB8, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xB8); }},
		{0xB9, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xB9); }},
		{0xBA, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xBA); }},
		{0xBB, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xBB); }},
		{0xBC, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xBC); }},
		{0xBD, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xBD); }},
		{0xBE, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xBE); }},
		{0xBF, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xBF); }},
		{0xC0, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xC0); }},
		{0xC1, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xC1); }},
		{0xC2, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xC2); }},
		{0xC3, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xC3); }},
		{0xC4, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xC4); }},
		{0xC5, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xC5); }},
		{0xC6, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xC6); }},
		{0xC7, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xC7); }},
		{0xC8, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xC8); }},
		{0xC9, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xC9); }},
		{0xCA, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xCA); }},
		{0xCB, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xCB); }},
		{0xCC, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xCC); }},
		{0xCD, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xCD); }},
		{0xCE, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xCE); }},
		{0xCF, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xCF); }},
		{0xD0, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xD0); }},
		{0xD1, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xD1); }},
		{0xD2, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xD2); }},
		{0xD3, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xD3); }},
		{0xD4, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xD4); }},
		{0xD5, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xD5); }},
		{0xD6, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xD6); }},
		{0xD7, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xD7); }},
		{0xD8, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xD8); }},
		{0xD9, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xD9); }},
		{0xDA, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xDA); }},
		{0xDB, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xDB); }},
		{0xDC, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xDC); }},
		{0xDD, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xDD); }},
		{0xDE, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xDE); }},
		{0xDF, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xDF); }},
		{0xE0, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xE0); }},
		{0xE1, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xE1); }},
		{0xE2, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xE2); }},
		{0xE3, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xE3); }},
		{0xE4, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xE4); }},
		{0xE5, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xE5); }},
		{0xE6, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xE6); }},
		{0xE7, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xE7); }},
		{0xE8, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xE8); }},
		{0xE9, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xE9); }},
		{0xEA, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xEA); }},
		{0xEB, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xEB); }},
		{0xEC, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xEC); }},
		{0xED, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xED); }},
		{0xEE, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xEE); }},
		{0xEF, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xEF); }},
		{0xF0, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xF0); }},
		{0xF1, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xF1); }},
		{0xF2, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xF2); }},
		{0xF3, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xF3); }},
		{0xF4, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xF4); }},
		{0xF5, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xF5); }},
		{0xF6, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xF6); }},
		{0xF7, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xF7); }},
		{0xF8, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xF8); }},
		{0xF9, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xF9); }},
		{0xFA, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xFA); }},
		{0xFB, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xFB); }},
		{0xFC, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xFC); }},
		{0xFD, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xFD); }},
		{0xFE, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xFE); }},
		{0xFF, [](__m128 a, __m128 b) { return _mm_dp_ps(a, b, 0xFF); }},
	};
} // namespace dp_ps
__m128 sse4_1_dp_ps(__m128 a, __m128 b, const int8_t imm8) { return dp_ps::map.at(imm8)(a, b); }
namespace extract_epi32 {
	const unordered_map<int8_t, function<int32_t(__m128i)>> map{
		{0, [](__m128i a) { return _mm_extract_epi32(a, 0); }},
		{1, [](__m128i a) { return _mm_extract_epi32(a, 1); }},
		{2, [](__m128i a) { return _mm_extract_epi32(a, 2); }},
		{3, [](__m128i a) { return _mm_extract_epi32(a, 3); }},
	};
} // namespace extract_epi32
int32_t sse4_1_extract_epi32(__m128i a, const int8_t imm8) { return extract_epi32::map.at(imm8 & 0x3)(a); }
namespace extract_epi64 {
	const unordered_map<int8_t, function<int64_t(__m128i)>> map{
		{0, [](__m128i a) { return _mm_extract_epi64(a, 0); }},
		{1, [](__m128i a) { return _mm_extract_epi64(a, 1); }},
	};
} // namespace extract_epi64
int64_t sse4_1_extract_epi64(__m128i a, const int8_t imm8) { return extract_epi64::map.at(imm8 & 0x1)(a); }
namespace extract_epi8 {
	const unordered_map<int8_t, function<int8_t(__m128i)>> map{
		{ 0, [](__m128i a) { return _mm_extract_epi8(a,  0); }},
		{ 1, [](__m128i a) { return _mm_extract_epi8(a,  1); }},
		{ 2, [](__m128i a) { return _mm_extract_epi8(a,  2); }},
		{ 3, [](__m128i a) { return _mm_extract_epi8(a,  3); }},
		{ 4, [](__m128i a) { return _mm_extract_epi8(a,  4); }},
		{ 5, [](__m128i a) { return _mm_extract_epi8(a,  5); }},
		{ 6, [](__m128i a) { return _mm_extract_epi8(a,  6); }},
		{ 7, [](__m128i a) { return _mm_extract_epi8(a,  7); }},
		{ 8, [](__m128i a) { return _mm_extract_epi8(a,  8); }},
		{ 9, [](__m128i a) { return _mm_extract_epi8(a,  9); }},
		{10, [](__m128i a) { return _mm_extract_epi8(a, 10); }},
		{11, [](__m128i a) { return _mm_extract_epi8(a, 11); }},
		{12, [](__m128i a) { return _mm_extract_epi8(a, 12); }},
		{13, [](__m128i a) { return _mm_extract_epi8(a, 13); }},
		{14, [](__m128i a) { return _mm_extract_epi8(a, 14); }},
		{15, [](__m128i a) { return _mm_extract_epi8(a, 15); }},
	};
} // namespace extract_epi8
int8_t sse4_1_extract_epi8(__m128i a, const int8_t imm8) { return extract_epi8::map.at(imm8 & 0xF)(a); }
namespace extract_ps {
	const unordered_map<int8_t, function<float(__m128)>> map{
		{0, [](__m128 a) { return _mm_extract_ps(a, 0); }},
		{1, [](__m128 a) { return _mm_extract_ps(a, 1); }},
		{2, [](__m128 a) { return _mm_extract_ps(a, 2); }},
		{3, [](__m128 a) { return _mm_extract_ps(a, 3); }},
	};
} // namespace extract_ps
float sse4_1_extract_ps(__m128 a, const int8_t imm8) { return extract_ps::map.at(imm8 & 0x3)(a); }
__m128d sse4_1_floor_pd(__m128d a) { return _mm_floor_pd(a); }
__m128 sse4_1_floor_ps(__m128 a) { return _mm_floor_ps(a); }
__m128d sse4_1_floor_sd(__m128d a, __m128d b) { return _mm_floor_sd(a, b); }
__m128 sse4_1_floor_ss(__m128 a, __m128 b) { return _mm_floor_ss(a, b); }
namespace insert_epi32 {
	const unordered_map<int8_t, function<__m128i(__m128i, int32_t)>> map{
		{0, [](__m128i a, int32_t i) { return _mm_insert_epi32(a, i, 0); }},
		{1, [](__m128i a, int32_t i) { return _mm_insert_epi32(a, i, 1); }},
		{2, [](__m128i a, int32_t i) { return _mm_insert_epi32(a, i, 2); }},
		{3, [](__m128i a, int32_t i) { return _mm_insert_epi32(a, i, 3); }},
	};
} // namespace insert_epi32
__m128i sse4_1_insert_epi32(__m128i a, int32_t i, const int8_t imm8) { return insert_epi32::map.at(imm8 & 0x3)(a, i); }
namespace insert_epi64 {
	const unordered_map<int8_t, function<__m128i(__m128i, int64_t)>> map{
		{0, [](__m128i a, int64_t i) { return _mm_insert_epi64(a, i, 0); }},
		{1, [](__m128i a, int64_t i) { return _mm_insert_epi64(a, i, 1); }},
	};
} // namespace insert_epi64
__m128i sse4_1_insert_epi64(__m128i a, int64_t i, const int8_t imm8) { return insert_epi64::map.at(imm8 & 0x1)(a, i); }
namespace insert_epi8 {
	const unordered_map<int8_t, function<__m128i(__m128i, int8_t)>> map{
		{ 0, [](__m128i a, int8_t i) { return _mm_insert_epi8(a, i,  0); }},
		{ 1, [](__m128i a, int8_t i) { return _mm_insert_epi8(a, i,  1); }},
		{ 2, [](__m128i a, int8_t i) { return _mm_insert_epi8(a, i,  2); }},
		{ 3, [](__m128i a, int8_t i) { return _mm_insert_epi8(a, i,  3); }},
		{ 4, [](__m128i a, int8_t i) { return _mm_insert_epi8(a, i,  4); }},
		{ 5, [](__m128i a, int8_t i) { return _mm_insert_epi8(a, i,  5); }},
		{ 6, [](__m128i a, int8_t i) { return _mm_insert_epi8(a, i,  6); }},
		{ 7, [](__m128i a, int8_t i) { return _mm_insert_epi8(a, i,  7); }},
		{ 8, [](__m128i a, int8_t i) { return _mm_insert_epi8(a, i,  8); }},
		{ 9, [](__m128i a, int8_t i) { return _mm_insert_epi8(a, i,  9); }},
		{10, [](__m128i a, int8_t i) { return _mm_insert_epi8(a, i, 10); }},
		{11, [](__m128i a, int8_t i) { return _mm_insert_epi8(a, i, 11); }},
		{12, [](__m128i a, int8_t i) { return _mm_insert_epi8(a, i, 12); }},
		{13, [](__m128i a, int8_t i) { return _mm_insert_epi8(a, i, 13); }},
		{14, [](__m128i a, int8_t i) { return _mm_insert_epi8(a, i, 14); }},
		{15, [](__m128i a, int8_t i) { return _mm_insert_epi8(a, i, 15); }},
	};
} // namespace insert_epi8
__m128i sse4_1_insert_epi8(__m128i a, int8_t i, const int8_t imm8) { return insert_epi8::map.at(imm8 & 0xF)(a, i); }
namespace insert_ps {
	const unordered_map<int8_t, function<__m128(__m128, __m128)>> map{
		{0x00, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x00); }},
		{0x01, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x01); }},
		{0x02, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x02); }},
		{0x03, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x03); }},
		{0x04, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x04); }},
		{0x05, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x05); }},
		{0x06, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x06); }},
		{0x07, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x07); }},
		{0x08, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x08); }},
		{0x09, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x09); }},
		{0x0A, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x0A); }},
		{0x0B, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x0B); }},
		{0x0C, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x0C); }},
		{0x0D, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x0D); }},
		{0x0E, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x0E); }},
		{0x0F, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x0F); }},
		{0x10, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x10); }},
		{0x11, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x11); }},
		{0x12, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x12); }},
		{0x13, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x13); }},
		{0x14, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x14); }},
		{0x15, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x15); }},
		{0x16, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x16); }},
		{0x17, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x17); }},
		{0x18, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x18); }},
		{0x19, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x19); }},
		{0x1A, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x1A); }},
		{0x1B, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x1B); }},
		{0x1C, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x1C); }},
		{0x1D, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x1D); }},
		{0x1E, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x1E); }},
		{0x1F, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x1F); }},
		{0x20, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x20); }},
		{0x21, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x21); }},
		{0x22, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x22); }},
		{0x23, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x23); }},
		{0x24, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x24); }},
		{0x25, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x25); }},
		{0x26, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x26); }},
		{0x27, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x27); }},
		{0x28, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x28); }},
		{0x29, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x29); }},
		{0x2A, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x2A); }},
		{0x2B, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x2B); }},
		{0x2C, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x2C); }},
		{0x2D, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x2D); }},
		{0x2E, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x2E); }},
		{0x2F, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x2F); }},
		{0x30, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x30); }},
		{0x31, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x31); }},
		{0x32, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x32); }},
		{0x33, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x33); }},
		{0x34, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x34); }},
		{0x35, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x35); }},
		{0x36, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x36); }},
		{0x37, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x37); }},
		{0x38, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x38); }},
		{0x39, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x39); }},
		{0x3A, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x3A); }},
		{0x3B, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x3B); }},
		{0x3C, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x3C); }},
		{0x3D, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x3D); }},
		{0x3E, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x3E); }},
		{0x3F, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x3F); }},
		{0x40, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x40); }},
		{0x41, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x41); }},
		{0x42, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x42); }},
		{0x43, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x43); }},
		{0x44, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x44); }},
		{0x45, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x45); }},
		{0x46, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x46); }},
		{0x47, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x47); }},
		{0x48, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x48); }},
		{0x49, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x49); }},
		{0x4A, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x4A); }},
		{0x4B, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x4B); }},
		{0x4C, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x4C); }},
		{0x4D, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x4D); }},
		{0x4E, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x4E); }},
		{0x4F, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x4F); }},
		{0x50, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x50); }},
		{0x51, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x51); }},
		{0x52, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x52); }},
		{0x53, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x53); }},
		{0x54, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x54); }},
		{0x55, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x55); }},
		{0x56, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x56); }},
		{0x57, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x57); }},
		{0x58, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x58); }},
		{0x59, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x59); }},
		{0x5A, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x5A); }},
		{0x5B, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x5B); }},
		{0x5C, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x5C); }},
		{0x5D, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x5D); }},
		{0x5E, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x5E); }},
		{0x5F, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x5F); }},
		{0x60, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x60); }},
		{0x61, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x61); }},
		{0x62, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x62); }},
		{0x63, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x63); }},
		{0x64, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x64); }},
		{0x65, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x65); }},
		{0x66, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x66); }},
		{0x67, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x67); }},
		{0x68, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x68); }},
		{0x69, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x69); }},
		{0x6A, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x6A); }},
		{0x6B, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x6B); }},
		{0x6C, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x6C); }},
		{0x6D, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x6D); }},
		{0x6E, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x6E); }},
		{0x6F, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x6F); }},
		{0x70, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x70); }},
		{0x71, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x71); }},
		{0x72, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x72); }},
		{0x73, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x73); }},
		{0x74, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x74); }},
		{0x75, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x75); }},
		{0x76, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x76); }},
		{0x77, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x77); }},
		{0x78, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x78); }},
		{0x79, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x79); }},
		{0x7A, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x7A); }},
		{0x7B, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x7B); }},
		{0x7C, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x7C); }},
		{0x7D, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x7D); }},
		{0x7E, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x7E); }},
		{0x7F, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x7F); }},
		{0x80, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x80); }},
		{0x81, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x81); }},
		{0x82, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x82); }},
		{0x83, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x83); }},
		{0x84, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x84); }},
		{0x85, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x85); }},
		{0x86, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x86); }},
		{0x87, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x87); }},
		{0x88, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x88); }},
		{0x89, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x89); }},
		{0x8A, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x8A); }},
		{0x8B, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x8B); }},
		{0x8C, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x8C); }},
		{0x8D, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x8D); }},
		{0x8E, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x8E); }},
		{0x8F, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x8F); }},
		{0x90, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x90); }},
		{0x91, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x91); }},
		{0x92, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x92); }},
		{0x93, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x93); }},
		{0x94, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x94); }},
		{0x95, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x95); }},
		{0x96, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x96); }},
		{0x97, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x97); }},
		{0x98, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x98); }},
		{0x99, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x99); }},
		{0x9A, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x9A); }},
		{0x9B, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x9B); }},
		{0x9C, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x9C); }},
		{0x9D, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x9D); }},
		{0x9E, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x9E); }},
		{0x9F, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0x9F); }},
		{0xA0, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xA0); }},
		{0xA1, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xA1); }},
		{0xA2, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xA2); }},
		{0xA3, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xA3); }},
		{0xA4, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xA4); }},
		{0xA5, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xA5); }},
		{0xA6, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xA6); }},
		{0xA7, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xA7); }},
		{0xA8, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xA8); }},
		{0xA9, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xA9); }},
		{0xAA, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xAA); }},
		{0xAB, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xAB); }},
		{0xAC, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xAC); }},
		{0xAD, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xAD); }},
		{0xAE, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xAE); }},
		{0xAF, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xAF); }},
		{0xB0, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xB0); }},
		{0xB1, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xB1); }},
		{0xB2, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xB2); }},
		{0xB3, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xB3); }},
		{0xB4, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xB4); }},
		{0xB5, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xB5); }},
		{0xB6, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xB6); }},
		{0xB7, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xB7); }},
		{0xB8, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xB8); }},
		{0xB9, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xB9); }},
		{0xBA, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xBA); }},
		{0xBB, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xBB); }},
		{0xBC, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xBC); }},
		{0xBD, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xBD); }},
		{0xBE, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xBE); }},
		{0xBF, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xBF); }},
		{0xC0, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xC0); }},
		{0xC1, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xC1); }},
		{0xC2, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xC2); }},
		{0xC3, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xC3); }},
		{0xC4, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xC4); }},
		{0xC5, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xC5); }},
		{0xC6, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xC6); }},
		{0xC7, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xC7); }},
		{0xC8, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xC8); }},
		{0xC9, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xC9); }},
		{0xCA, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xCA); }},
		{0xCB, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xCB); }},
		{0xCC, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xCC); }},
		{0xCD, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xCD); }},
		{0xCE, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xCE); }},
		{0xCF, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xCF); }},
		{0xD0, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xD0); }},
		{0xD1, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xD1); }},
		{0xD2, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xD2); }},
		{0xD3, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xD3); }},
		{0xD4, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xD4); }},
		{0xD5, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xD5); }},
		{0xD6, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xD6); }},
		{0xD7, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xD7); }},
		{0xD8, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xD8); }},
		{0xD9, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xD9); }},
		{0xDA, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xDA); }},
		{0xDB, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xDB); }},
		{0xDC, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xDC); }},
		{0xDD, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xDD); }},
		{0xDE, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xDE); }},
		{0xDF, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xDF); }},
		{0xE0, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xE0); }},
		{0xE1, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xE1); }},
		{0xE2, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xE2); }},
		{0xE3, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xE3); }},
		{0xE4, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xE4); }},
		{0xE5, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xE5); }},
		{0xE6, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xE6); }},
		{0xE7, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xE7); }},
		{0xE8, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xE8); }},
		{0xE9, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xE9); }},
		{0xEA, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xEA); }},
		{0xEB, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xEB); }},
		{0xEC, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xEC); }},
		{0xED, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xED); }},
		{0xEE, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xEE); }},
		{0xEF, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xEF); }},
		{0xF0, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xF0); }},
		{0xF1, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xF1); }},
		{0xF2, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xF2); }},
		{0xF3, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xF3); }},
		{0xF4, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xF4); }},
		{0xF5, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xF5); }},
		{0xF6, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xF6); }},
		{0xF7, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xF7); }},
		{0xF8, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xF8); }},
		{0xF9, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xF9); }},
		{0xFA, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xFA); }},
		{0xFB, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xFB); }},
		{0xFC, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xFC); }},
		{0xFD, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xFD); }},
		{0xFE, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xFE); }},
		{0xFF, [](__m128 a, __m128 b) { return _mm_insert_ps(a, b, 0xFF); }},
	};
} // namespace insert_ps
__m128 sse4_1_insert_ps(__m128 a, __m128 b, const int8_t imm8) { return insert_ps::map.at(imm8)(a, b); }
__m128i sse4_1_max_epi32(__m128i a, __m128i b) { return _mm_max_epi32(a, b); }
__m128i sse4_1_max_epi8(__m128i a, __m128i b) { return _mm_max_epi8(a, b); }
__m128i sse4_1_max_epu16(__m128i a, __m128i b) { return _mm_max_epu16(a, b); }
__m128i sse4_1_max_epu32(__m128i a, __m128i b) { return _mm_max_epu32(a, b); }
__m128i sse4_1_min_epi32(__m128i a, __m128i b) { return _mm_min_epi32(a, b); }
__m128i sse4_1_min_epi8(__m128i a, __m128i b) { return _mm_min_epi8(a, b); }
__m128i sse4_1_min_epu16(__m128i a, __m128i b) { return _mm_min_epu16(a, b); }
__m128i sse4_1_min_epu32(__m128i a, __m128i b) { return _mm_min_epu32(a, b); }
__m128i sse4_1_minpos_epu16(__m128i a) { return _mm_minpos_epu16(a); }
namespace mpsadbw_epu8 {
	const unordered_map<int8_t, function<__m128i(__m128i, __m128i)>> map{
		{0, [](__m128i a, __m128i b) { return _mm_mpsadbw_epu8(a, b, 0); }},
		{1, [](__m128i a, __m128i b) { return _mm_mpsadbw_epu8(a, b, 1); }},
		{2, [](__m128i a, __m128i b) { return _mm_mpsadbw_epu8(a, b, 2); }},
		{3, [](__m128i a, __m128i b) { return _mm_mpsadbw_epu8(a, b, 3); }},
		{4, [](__m128i a, __m128i b) { return _mm_mpsadbw_epu8(a, b, 4); }},
		{5, [](__m128i a, __m128i b) { return _mm_mpsadbw_epu8(a, b, 5); }},
		{6, [](__m128i a, __m128i b) { return _mm_mpsadbw_epu8(a, b, 6); }},
		{7, [](__m128i a, __m128i b) { return _mm_mpsadbw_epu8(a, b, 7); }},
	};
} // namespace mpsadbw_epu8
__m128i sse4_1_mpsadbw_epu8(__m128i a, __m128i b, const int8_t imm8) { return mpsadbw_epu8::map.at(imm8 & 0x7)(a, b); }
__m128i sse4_1_mul_epi32(__m128i a, __m128i b) { return _mm_mul_epi32(a, b); }
__m128i sse4_1_mullo_epi32(__m128i a, __m128i b) { return _mm_mullo_epi32(a, b); }
__m128i sse4_1_packus_epi32(__m128i a, __m128i b) { return _mm_packus_epi32(a, b); }
namespace round_pd {
	const unordered_map<int8_t, function<__m128d(__m128d)>> map{
		{ 0, [](__m128d a) { return _mm_round_pd(a,  0); }},
		{ 1, [](__m128d a) { return _mm_round_pd(a,  1); }},
		{ 2, [](__m128d a) { return _mm_round_pd(a,  2); }},
		{ 3, [](__m128d a) { return _mm_round_pd(a,  3); }},
		{ 4, [](__m128d a) { return _mm_round_pd(a,  4); }},
		{ 5, [](__m128d a) { return _mm_round_pd(a,  5); }},
		{ 6, [](__m128d a) { return _mm_round_pd(a,  6); }},
		{ 7, [](__m128d a) { return _mm_round_pd(a,  7); }},
		{ 8, [](__m128d a) { return _mm_round_pd(a,  8); }},
		{ 9, [](__m128d a) { return _mm_round_pd(a,  9); }},
		{10, [](__m128d a) { return _mm_round_pd(a, 10); }},
		{11, [](__m128d a) { return _mm_round_pd(a, 11); }},
		{12, [](__m128d a) { return _mm_round_pd(a, 12); }},
		{13, [](__m128d a) { return _mm_round_pd(a, 13); }},
		{14, [](__m128d a) { return _mm_round_pd(a, 14); }},
		{15, [](__m128d a) { return _mm_round_pd(a, 15); }},
	};
} // namespace round_pd
__m128d sse4_1_round_pd(__m128d a, int32_t rounding) { return round_pd::map.at(rounding & 0xF)(a); }
namespace round_ps {
	const unordered_map<int8_t, function<__m128(__m128)>> map{
		{ 0, [](__m128 a) { return _mm_round_ps(a,  0); }},
		{ 1, [](__m128 a) { return _mm_round_ps(a,  1); }},
		{ 2, [](__m128 a) { return _mm_round_ps(a,  2); }},
		{ 3, [](__m128 a) { return _mm_round_ps(a,  3); }},
		{ 4, [](__m128 a) { return _mm_round_ps(a,  4); }},
		{ 5, [](__m128 a) { return _mm_round_ps(a,  5); }},
		{ 6, [](__m128 a) { return _mm_round_ps(a,  6); }},
		{ 7, [](__m128 a) { return _mm_round_ps(a,  7); }},
		{ 8, [](__m128 a) { return _mm_round_ps(a,  8); }},
		{ 9, [](__m128 a) { return _mm_round_ps(a,  9); }},
		{10, [](__m128 a) { return _mm_round_ps(a, 10); }},
		{11, [](__m128 a) { return _mm_round_ps(a, 11); }},
		{12, [](__m128 a) { return _mm_round_ps(a, 12); }},
		{13, [](__m128 a) { return _mm_round_ps(a, 13); }},
		{14, [](__m128 a) { return _mm_round_ps(a, 14); }},
		{15, [](__m128 a) { return _mm_round_ps(a, 15); }},
	};
} // namespace round_ps
__m128 sse4_1_round_ps(__m128 a, int32_t rounding) { return round_ps::map.at(rounding & 0xF)(a); }
namespace round_sd {
	const unordered_map<int8_t, function<__m128d(__m128d, __m128d)>> map{
		{ 0, [](__m128d a, __m128d b) { return _mm_round_sd(a, b,  0); }},
		{ 1, [](__m128d a, __m128d b) { return _mm_round_sd(a, b,  1); }},
		{ 2, [](__m128d a, __m128d b) { return _mm_round_sd(a, b,  2); }},
		{ 3, [](__m128d a, __m128d b) { return _mm_round_sd(a, b,  3); }},
		{ 4, [](__m128d a, __m128d b) { return _mm_round_sd(a, b,  4); }},
		{ 5, [](__m128d a, __m128d b) { return _mm_round_sd(a, b,  5); }},
		{ 6, [](__m128d a, __m128d b) { return _mm_round_sd(a, b,  6); }},
		{ 7, [](__m128d a, __m128d b) { return _mm_round_sd(a, b,  7); }},
		{ 8, [](__m128d a, __m128d b) { return _mm_round_sd(a, b,  8); }},
		{ 9, [](__m128d a, __m128d b) { return _mm_round_sd(a, b,  9); }},
		{10, [](__m128d a, __m128d b) { return _mm_round_sd(a, b, 10); }},
		{11, [](__m128d a, __m128d b) { return _mm_round_sd(a, b, 11); }},
		{12, [](__m128d a, __m128d b) { return _mm_round_sd(a, b, 12); }},
		{13, [](__m128d a, __m128d b) { return _mm_round_sd(a, b, 13); }},
		{14, [](__m128d a, __m128d b) { return _mm_round_sd(a, b, 14); }},
		{15, [](__m128d a, __m128d b) { return _mm_round_sd(a, b, 15); }},
	};
} // namespace round_sd
__m128d sse4_1_round_sd(__m128d a, __m128d b, int32_t rounding) { return round_sd::map.at(rounding & 0xF)(a, b); }
namespace round_ss {
	const unordered_map<int8_t, function<__m128(__m128, __m128)>> map{
		{ 0, [](__m128 a, __m128 b) { return _mm_round_ss(a, b,  0); }},
		{ 1, [](__m128 a, __m128 b) { return _mm_round_ss(a, b,  1); }},
		{ 2, [](__m128 a, __m128 b) { return _mm_round_ss(a, b,  2); }},
		{ 3, [](__m128 a, __m128 b) { return _mm_round_ss(a, b,  3); }},
		{ 4, [](__m128 a, __m128 b) { return _mm_round_ss(a, b,  4); }},
		{ 5, [](__m128 a, __m128 b) { return _mm_round_ss(a, b,  5); }},
		{ 6, [](__m128 a, __m128 b) { return _mm_round_ss(a, b,  6); }},
		{ 7, [](__m128 a, __m128 b) { return _mm_round_ss(a, b,  7); }},
		{ 8, [](__m128 a, __m128 b) { return _mm_round_ss(a, b,  8); }},
		{ 9, [](__m128 a, __m128 b) { return _mm_round_ss(a, b,  9); }},
		{10, [](__m128 a, __m128 b) { return _mm_round_ss(a, b, 10); }},
		{11, [](__m128 a, __m128 b) { return _mm_round_ss(a, b, 11); }},
		{12, [](__m128 a, __m128 b) { return _mm_round_ss(a, b, 12); }},
		{13, [](__m128 a, __m128 b) { return _mm_round_ss(a, b, 13); }},
		{14, [](__m128 a, __m128 b) { return _mm_round_ss(a, b, 14); }},
		{15, [](__m128 a, __m128 b) { return _mm_round_ss(a, b, 15); }},
	};
} // namespace round_ss
__m128 sse4_1_round_ss(__m128 a, __m128 b, int32_t rounding) { return round_ss::map.at(rounding & 0xF)(a, b); }
__m128i sse4_1_stream_load_si128(__m128i* mem_addr) { return _mm_stream_load_si128(mem_addr); }
bool sse4_1_test_all_ones(__m128i a) { return _mm_test_all_ones(a); }
bool sse4_1_test_all_zeros(__m128i a, __m128i mask) { return _mm_test_all_zeros(a, mask); }
bool sse4_1_test_mix_ones_zeros(__m128i a, __m128i mask) { return _mm_test_mix_ones_zeros(a, mask); }
bool sse4_1_testc_si128(__m128i a, __m128i b) { return _mm_testc_si128(a, b); }
bool sse4_1_testnzc_si128(__m128i a, __m128i b) { return _mm_testnzc_si128(a, b); }
bool sse4_1_testz_si128(__m128i a, __m128i b) { return _mm_testz_si128(a, b); }

#pragma GCC diagnostic pop
