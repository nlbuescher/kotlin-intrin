#include <nmmintrin.h>

#include "sse4.2.h"

namespace cmpestra {
	typedef bool(*function)(__m128i, int32_t, __m128i, int32_t);
	const function map[256] {
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x00); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x01); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x02); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x03); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x04); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x05); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x06); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x07); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x08); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x09); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x0A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x0B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x0C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x0D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x0E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x0F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x10); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x11); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x12); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x13); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x14); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x15); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x16); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x17); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x18); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x19); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x1A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x1B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x1C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x1D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x1E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x1F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x20); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x21); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x22); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x23); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x24); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x25); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x26); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x27); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x28); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x29); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x2A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x2B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x2C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x2D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x2E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x2F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x30); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x31); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x32); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x33); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x34); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x35); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x36); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x37); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x38); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x39); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x3A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x3B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x3C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x3D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x3E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x3F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x40); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x41); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x42); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x43); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x44); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x45); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x46); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x47); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x48); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x49); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x4A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x4B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x4C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x4D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x4E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x4F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x50); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x51); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x52); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x53); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x54); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x55); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x56); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x57); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x58); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x59); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x5A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x5B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x5C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x5D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x5E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x5F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x60); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x61); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x62); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x63); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x64); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x65); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x66); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x67); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x68); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x69); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x6A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x6B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x6C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x6D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x6E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x6F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x70); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x71); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x72); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x73); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x74); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x75); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x76); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x77); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x78); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x79); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x7A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x7B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x7C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x7D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x7E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestra(a, la, b, lb, 0x7F); },
	};
} // namespace cmpestra
bool sse4_2_cmpestra(__m128i a, int32_t la, __m128i b, int32_t lb, uint8_t imm8) { return cmpestra::map[imm8 & 0x7F](a, la, b, lb); }
namespace cmpestrc {
	using function = bool(*)(__m128i, int32_t, __m128i, int32_t);
	const function map[] {
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x00); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x01); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x02); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x03); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x04); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x05); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x06); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x07); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x08); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x09); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x0A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x0B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x0C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x0D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x0E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x0F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x10); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x11); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x12); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x13); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x14); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x15); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x16); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x17); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x18); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x19); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x1A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x1B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x1C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x1D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x1E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x1F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x20); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x21); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x22); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x23); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x24); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x25); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x26); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x27); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x28); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x29); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x2A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x2B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x2C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x2D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x2E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x2F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x30); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x31); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x32); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x33); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x34); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x35); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x36); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x37); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x38); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x39); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x3A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x3B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x3C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x3D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x3E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x3F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x40); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x41); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x42); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x43); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x44); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x45); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x46); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x47); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x48); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x49); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x4A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x4B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x4C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x4D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x4E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x4F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x50); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x51); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x52); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x53); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x54); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x55); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x56); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x57); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x58); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x59); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x5A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x5B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x5C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x5D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x5E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x5F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x60); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x61); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x62); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x63); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x64); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x65); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x66); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x67); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x68); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x69); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x6A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x6B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x6C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x6D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x6E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x6F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x70); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x71); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x72); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x73); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x74); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x75); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x76); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x77); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x78); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x79); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x7A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x7B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x7C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x7D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x7E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrc(a, la, b, lb, 0x7F); },
	};
} // namespace cmpestrc
bool sse4_2_cmpestrc(__m128i a, int32_t la, __m128i b, int32_t lb, uint8_t imm8) { return cmpestrc::map[imm8 & 0x7F](a, la, b, lb); }
namespace cmpestri {
	using function = int32_t(*)(__m128i, int32_t, __m128i, int32_t);
	const function map[] {
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x00); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x01); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x02); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x03); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x04); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x05); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x06); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x07); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x08); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x09); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x0A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x0B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x0C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x0D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x0E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x0F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x10); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x11); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x12); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x13); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x14); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x15); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x16); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x17); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x18); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x19); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x1A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x1B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x1C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x1D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x1E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x1F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x20); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x21); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x22); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x23); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x24); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x25); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x26); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x27); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x28); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x29); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x2A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x2B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x2C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x2D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x2E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x2F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x30); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x31); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x32); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x33); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x34); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x35); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x36); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x37); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x38); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x39); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x3A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x3B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x3C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x3D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x3E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x3F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x40); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x41); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x42); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x43); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x44); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x45); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x46); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x47); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x48); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x49); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x4A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x4B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x4C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x4D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x4E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x4F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x50); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x51); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x52); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x53); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x54); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x55); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x56); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x57); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x58); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x59); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x5A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x5B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x5C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x5D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x5E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x5F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x60); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x61); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x62); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x63); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x64); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x65); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x66); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x67); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x68); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x69); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x6A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x6B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x6C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x6D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x6E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x6F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x70); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x71); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x72); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x73); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x74); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x75); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x76); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x77); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x78); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x79); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x7A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x7B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x7C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x7D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x7E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestri(a, la, b, lb, 0x7F); },
	};
} // namespace cmpestri
int32_t sse4_2_cmpestri(__m128i a, int32_t la, __m128i b, int32_t lb, uint8_t imm8) { return cmpestri::map[imm8 & 0x7F](a, la, b, lb); }
namespace cmpestrm {
	using function = __m128i(*)(__m128i, int32_t, __m128i, int32_t);
	const function map[] {
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x00); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x01); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x02); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x03); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x04); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x05); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x06); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x07); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x08); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x09); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x0A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x0B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x0C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x0D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x0E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x0F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x10); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x11); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x12); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x13); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x14); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x15); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x16); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x17); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x18); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x19); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x1A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x1B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x1C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x1D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x1E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x1F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x20); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x21); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x22); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x23); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x24); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x25); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x26); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x27); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x28); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x29); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x2A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x2B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x2C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x2D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x2E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x2F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x30); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x31); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x32); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x33); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x34); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x35); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x36); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x37); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x38); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x39); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x3A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x3B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x3C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x3D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x3E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x3F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x40); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x41); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x42); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x43); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x44); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x45); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x46); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x47); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x48); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x49); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x4A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x4B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x4C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x4D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x4E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x4F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x50); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x51); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x52); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x53); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x54); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x55); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x56); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x57); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x58); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x59); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x5A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x5B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x5C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x5D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x5E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x5F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x60); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x61); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x62); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x63); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x64); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x65); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x66); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x67); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x68); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x69); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x6A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x6B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x6C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x6D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x6E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x6F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x70); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x71); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x72); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x73); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x74); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x75); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x76); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x77); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x78); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x79); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x7A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x7B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x7C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x7D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x7E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return _mm_cmpestrm(a, la, b, lb, 0x7F); },
	};
} // namespace cmpestrm
__m128i sse4_2_cmpestrm(__m128i a, int32_t la, __m128i b, int32_t lb, uint8_t imm8) { return cmpestrm::map[imm8 & 0x7F](a, la, b, lb); }
namespace cmpestro {
	using function = bool(*)(__m128i, int32_t, __m128i, int32_t);
	const function map[] {
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x00); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x01); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x02); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x03); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x04); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x05); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x06); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x07); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x08); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x09); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x0A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x0B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x0C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x0D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x0E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x0F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x10); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x11); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x12); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x13); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x14); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x15); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x16); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x17); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x18); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x19); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x1A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x1B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x1C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x1D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x1E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x1F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x20); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x21); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x22); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x23); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x24); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x25); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x26); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x27); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x28); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x29); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x2A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x2B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x2C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x2D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x2E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x2F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x30); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x31); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x32); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x33); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x34); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x35); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x36); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x37); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x38); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x39); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x3A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x3B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x3C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x3D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x3E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x3F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x40); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x41); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x42); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x43); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x44); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x45); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x46); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x47); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x48); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x49); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x4A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x4B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x4C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x4D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x4E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x4F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x50); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x51); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x52); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x53); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x54); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x55); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x56); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x57); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x58); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x59); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x5A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x5B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x5C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x5D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x5E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x5F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x60); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x61); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x62); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x63); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x64); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x65); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x66); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x67); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x68); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x69); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x6A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x6B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x6C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x6D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x6E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x6F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x70); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x71); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x72); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x73); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x74); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x75); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x76); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x77); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x78); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x79); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x7A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x7B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x7C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x7D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x7E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestro(a, la, b, lb, 0x7F); },
	};
} // namespace cmpestro
bool sse4_2_cmpestro(__m128i a, int32_t la, __m128i b, int32_t lb, uint8_t imm8) { return cmpestro::map[imm8 & 0x7F](a, la, b, lb); }
namespace cmpestrs {
	using function = bool(*)(__m128i, int32_t, __m128i, int32_t);
	const function map[] {
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x00); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x01); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x02); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x03); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x04); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x05); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x06); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x07); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x08); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x09); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x0A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x0B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x0C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x0D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x0E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x0F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x10); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x11); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x12); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x13); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x14); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x15); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x16); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x17); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x18); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x19); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x1A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x1B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x1C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x1D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x1E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x1F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x20); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x21); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x22); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x23); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x24); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x25); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x26); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x27); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x28); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x29); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x2A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x2B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x2C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x2D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x2E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x2F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x30); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x31); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x32); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x33); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x34); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x35); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x36); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x37); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x38); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x39); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x3A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x3B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x3C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x3D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x3E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x3F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x40); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x41); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x42); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x43); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x44); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x45); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x46); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x47); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x48); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x49); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x4A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x4B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x4C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x4D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x4E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x4F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x50); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x51); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x52); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x53); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x54); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x55); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x56); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x57); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x58); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x59); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x5A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x5B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x5C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x5D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x5E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x5F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x60); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x61); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x62); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x63); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x64); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x65); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x66); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x67); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x68); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x69); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x6A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x6B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x6C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x6D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x6E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x6F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x70); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x71); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x72); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x73); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x74); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x75); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x76); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x77); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x78); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x79); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x7A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x7B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x7C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x7D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x7E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrs(a, la, b, lb, 0x7F); },
	};
} // namespace cmpestrs
bool sse4_2_cmpestrs(__m128i a, int32_t la, __m128i b, int32_t lb, uint8_t imm8) { return cmpestrs::map[imm8 & 0x7F](a, la, b, lb); }
namespace cmpestrz {
	using function = bool(*)(__m128i, int32_t, __m128i, int32_t);
	const function map[] {
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x00); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x01); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x02); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x03); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x04); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x05); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x06); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x07); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x08); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x09); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x0A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x0B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x0C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x0D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x0E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x0F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x10); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x11); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x12); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x13); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x14); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x15); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x16); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x17); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x18); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x19); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x1A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x1B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x1C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x1D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x1E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x1F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x20); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x21); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x22); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x23); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x24); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x25); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x26); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x27); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x28); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x29); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x2A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x2B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x2C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x2D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x2E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x2F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x30); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x31); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x32); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x33); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x34); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x35); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x36); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x37); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x38); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x39); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x3A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x3B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x3C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x3D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x3E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x3F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x40); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x41); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x42); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x43); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x44); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x45); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x46); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x47); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x48); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x49); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x4A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x4B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x4C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x4D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x4E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x4F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x50); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x51); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x52); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x53); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x54); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x55); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x56); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x57); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x58); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x59); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x5A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x5B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x5C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x5D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x5E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x5F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x60); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x61); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x62); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x63); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x64); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x65); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x66); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x67); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x68); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x69); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x6A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x6B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x6C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x6D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x6E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x6F); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x70); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x71); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x72); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x73); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x74); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x75); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x76); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x77); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x78); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x79); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x7A); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x7B); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x7C); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x7D); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x7E); },
		[](__m128i a, int32_t la, __m128i b, int32_t lb) { return (bool)_mm_cmpestrz(a, la, b, lb, 0x7F); },
	};
} // namespace cmpestrz
bool sse4_2_cmpestrz(__m128i a, int32_t la, __m128i b, int32_t lb, uint8_t imm8) { return cmpestrz::map[imm8 & 0x7F](a, la, b, lb); }
__m128i sse4_2_cmpgt_epi64(__m128i a, __m128i b) { return _mm_cmpgt_epi64(a, b); }
namespace cmpistra {
	using function = bool(*)(__m128i, __m128i);
	const function map[] {
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x00); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x01); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x02); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x03); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x04); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x05); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x06); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x07); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x08); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x09); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x0A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x0B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x0C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x0D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x0E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x0F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x10); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x11); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x12); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x13); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x14); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x15); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x16); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x17); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x18); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x19); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x1A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x1B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x1C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x1D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x1E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x1F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x20); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x21); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x22); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x23); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x24); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x25); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x26); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x27); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x28); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x29); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x2A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x2B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x2C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x2D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x2E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x2F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x30); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x31); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x32); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x33); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x34); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x35); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x36); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x37); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x38); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x39); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x3A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x3B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x3C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x3D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x3E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x3F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x40); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x41); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x42); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x43); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x44); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x45); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x46); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x47); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x48); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x49); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x4A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x4B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x4C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x4D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x4E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x4F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x50); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x51); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x52); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x53); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x54); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x55); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x56); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x57); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x58); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x59); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x5A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x5B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x5C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x5D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x5E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x5F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x60); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x61); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x62); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x63); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x64); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x65); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x66); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x67); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x68); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x69); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x6A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x6B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x6C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x6D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x6E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x6F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x70); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x71); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x72); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x73); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x74); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x75); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x76); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x77); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x78); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x79); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x7A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x7B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x7C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x7D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x7E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistra(a, b, 0x7F); },
	};
} // namespace cmpistra
bool sse4_2_cmpistra(__m128i a, __m128i b, uint8_t imm8) { return cmpistra::map[imm8 & 0x7F](a, b); }
namespace cmpistrc {
	using function = bool(*)(__m128i, __m128i);
	const function map[] {
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x00); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x01); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x02); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x03); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x04); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x05); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x06); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x07); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x08); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x09); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x0A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x0B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x0C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x0D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x0E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x0F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x10); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x11); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x12); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x13); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x14); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x15); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x16); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x17); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x18); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x19); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x1A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x1B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x1C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x1D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x1E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x1F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x20); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x21); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x22); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x23); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x24); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x25); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x26); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x27); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x28); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x29); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x2A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x2B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x2C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x2D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x2E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x2F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x30); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x31); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x32); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x33); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x34); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x35); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x36); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x37); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x38); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x39); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x3A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x3B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x3C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x3D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x3E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x3F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x40); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x41); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x42); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x43); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x44); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x45); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x46); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x47); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x48); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x49); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x4A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x4B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x4C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x4D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x4E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x4F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x50); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x51); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x52); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x53); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x54); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x55); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x56); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x57); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x58); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x59); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x5A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x5B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x5C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x5D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x5E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x5F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x60); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x61); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x62); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x63); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x64); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x65); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x66); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x67); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x68); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x69); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x6A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x6B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x6C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x6D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x6E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x6F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x70); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x71); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x72); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x73); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x74); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x75); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x76); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x77); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x78); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x79); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x7A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x7B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x7C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x7D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x7E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrc(a, b, 0x7F); },
	};
} // namespace cmpistrc
bool sse4_2_cmpistrc(__m128i a, __m128i b, uint8_t imm8) { return cmpistrc::map[imm8 & 0x7F](a, b); }
namespace cmpistri {
	using function = int32_t(*)(__m128i, __m128i);
	const function map[] {
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x00); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x01); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x02); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x03); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x04); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x05); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x06); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x07); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x08); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x09); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x0A); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x0B); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x0C); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x0D); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x0E); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x0F); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x10); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x11); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x12); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x13); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x14); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x15); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x16); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x17); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x18); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x19); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x1A); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x1B); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x1C); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x1D); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x1E); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x1F); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x20); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x21); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x22); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x23); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x24); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x25); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x26); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x27); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x28); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x29); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x2A); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x2B); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x2C); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x2D); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x2E); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x2F); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x30); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x31); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x32); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x33); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x34); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x35); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x36); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x37); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x38); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x39); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x3A); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x3B); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x3C); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x3D); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x3E); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x3F); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x40); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x41); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x42); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x43); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x44); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x45); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x46); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x47); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x48); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x49); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x4A); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x4B); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x4C); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x4D); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x4E); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x4F); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x50); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x51); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x52); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x53); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x54); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x55); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x56); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x57); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x58); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x59); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x5A); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x5B); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x5C); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x5D); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x5E); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x5F); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x60); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x61); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x62); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x63); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x64); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x65); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x66); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x67); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x68); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x69); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x6A); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x6B); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x6C); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x6D); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x6E); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x6F); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x70); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x71); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x72); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x73); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x74); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x75); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x76); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x77); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x78); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x79); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x7A); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x7B); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x7C); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x7D); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x7E); },
		[](__m128i a, __m128i b) { return _mm_cmpistri(a, b, 0x7F); },
	};
} // namespace cmpistri
int32_t sse4_2_cmpistri(__m128i a, __m128i b, uint8_t imm8) { return cmpistri::map[imm8 & 0x7F](a, b); }
namespace cmpistrm {
	using function = __m128i(*)(__m128i, __m128i);
	const function map[] {
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x00); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x01); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x02); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x03); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x04); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x05); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x06); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x07); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x08); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x09); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x0A); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x0B); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x0C); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x0D); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x0E); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x0F); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x10); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x11); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x12); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x13); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x14); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x15); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x16); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x17); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x18); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x19); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x1A); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x1B); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x1C); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x1D); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x1E); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x1F); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x20); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x21); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x22); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x23); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x24); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x25); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x26); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x27); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x28); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x29); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x2A); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x2B); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x2C); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x2D); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x2E); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x2F); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x30); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x31); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x32); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x33); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x34); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x35); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x36); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x37); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x38); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x39); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x3A); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x3B); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x3C); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x3D); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x3E); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x3F); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x40); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x41); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x42); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x43); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x44); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x45); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x46); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x47); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x48); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x49); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x4A); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x4B); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x4C); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x4D); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x4E); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x4F); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x50); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x51); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x52); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x53); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x54); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x55); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x56); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x57); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x58); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x59); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x5A); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x5B); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x5C); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x5D); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x5E); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x5F); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x60); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x61); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x62); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x63); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x64); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x65); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x66); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x67); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x68); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x69); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x6A); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x6B); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x6C); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x6D); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x6E); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x6F); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x70); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x71); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x72); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x73); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x74); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x75); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x76); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x77); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x78); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x79); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x7A); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x7B); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x7C); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x7D); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x7E); },
		[](__m128i a, __m128i b) { return _mm_cmpistrm(a, b, 0x7F); },
	};
} // namespace cmpistrm
__m128i sse4_2_cmpistrm(__m128i a, __m128i b, uint8_t imm8) { return cmpistrm::map[imm8 & 0x7F](a, b); }
namespace cmpistro {
	using function = bool(*)(__m128i, __m128i);
	const function map[] {
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x00); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x01); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x02); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x03); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x04); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x05); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x06); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x07); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x08); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x09); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x0A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x0B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x0C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x0D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x0E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x0F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x10); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x11); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x12); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x13); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x14); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x15); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x16); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x17); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x18); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x19); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x1A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x1B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x1C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x1D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x1E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x1F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x20); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x21); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x22); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x23); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x24); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x25); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x26); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x27); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x28); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x29); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x2A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x2B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x2C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x2D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x2E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x2F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x30); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x31); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x32); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x33); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x34); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x35); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x36); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x37); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x38); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x39); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x3A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x3B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x3C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x3D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x3E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x3F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x40); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x41); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x42); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x43); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x44); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x45); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x46); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x47); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x48); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x49); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x4A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x4B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x4C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x4D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x4E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x4F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x50); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x51); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x52); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x53); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x54); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x55); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x56); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x57); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x58); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x59); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x5A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x5B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x5C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x5D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x5E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x5F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x60); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x61); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x62); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x63); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x64); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x65); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x66); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x67); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x68); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x69); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x6A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x6B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x6C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x6D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x6E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x6F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x70); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x71); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x72); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x73); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x74); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x75); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x76); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x77); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x78); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x79); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x7A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x7B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x7C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x7D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x7E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistro(a, b, 0x7F); },
	};
} // namespace cmpistro
bool sse4_2_cmpistro(__m128i a, __m128i b, uint8_t imm8) { return cmpistro::map[imm8 & 0x7F](a, b); }
namespace cmpistrs {
	using function = bool(*)(__m128i, __m128i);
	const function map[] {
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x00); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x01); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x02); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x03); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x04); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x05); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x06); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x07); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x08); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x09); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x0A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x0B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x0C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x0D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x0E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x0F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x10); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x11); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x12); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x13); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x14); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x15); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x16); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x17); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x18); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x19); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x1A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x1B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x1C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x1D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x1E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x1F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x20); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x21); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x22); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x23); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x24); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x25); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x26); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x27); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x28); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x29); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x2A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x2B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x2C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x2D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x2E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x2F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x30); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x31); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x32); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x33); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x34); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x35); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x36); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x37); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x38); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x39); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x3A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x3B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x3C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x3D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x3E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x3F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x40); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x41); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x42); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x43); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x44); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x45); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x46); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x47); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x48); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x49); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x4A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x4B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x4C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x4D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x4E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x4F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x50); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x51); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x52); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x53); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x54); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x55); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x56); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x57); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x58); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x59); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x5A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x5B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x5C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x5D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x5E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x5F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x60); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x61); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x62); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x63); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x64); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x65); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x66); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x67); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x68); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x69); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x6A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x6B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x6C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x6D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x6E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x6F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x70); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x71); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x72); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x73); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x74); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x75); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x76); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x77); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x78); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x79); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x7A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x7B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x7C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x7D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x7E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrs(a, b, 0x7F); },
	};
} // namespace cmpistrs
bool sse4_2_cmpistrs(__m128i a, __m128i b, uint8_t imm8) { return cmpistrs::map[imm8 & 0x7F](a, b); }
namespace cmpistrz {
	using function = bool(*)(__m128i, __m128i);
	const function map[] {
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x00); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x01); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x02); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x03); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x04); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x05); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x06); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x07); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x08); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x09); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x0A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x0B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x0C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x0D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x0E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x0F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x10); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x11); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x12); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x13); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x14); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x15); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x16); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x17); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x18); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x19); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x1A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x1B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x1C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x1D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x1E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x1F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x20); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x21); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x22); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x23); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x24); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x25); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x26); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x27); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x28); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x29); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x2A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x2B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x2C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x2D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x2E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x2F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x30); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x31); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x32); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x33); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x34); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x35); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x36); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x37); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x38); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x39); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x3A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x3B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x3C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x3D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x3E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x3F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x40); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x41); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x42); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x43); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x44); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x45); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x46); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x47); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x48); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x49); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x4A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x4B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x4C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x4D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x4E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x4F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x50); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x51); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x52); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x53); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x54); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x55); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x56); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x57); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x58); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x59); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x5A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x5B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x5C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x5D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x5E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x5F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x60); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x61); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x62); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x63); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x64); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x65); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x66); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x67); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x68); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x69); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x6A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x6B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x6C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x6D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x6E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x6F); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x70); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x71); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x72); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x73); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x74); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x75); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x76); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x77); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x78); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x79); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x7A); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x7B); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x7C); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x7D); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x7E); },
		[](__m128i a, __m128i b) { return (bool)_mm_cmpistrz(a, b, 0x7F); },
	};
} // namespace cmpistrz
bool sse4_2_cmpistrz(__m128i a, __m128i b, uint8_t imm8) { return cmpistrz::map[imm8 & 0x7F](a, b); }
uint32_t sse4_2_crc32_u16(uint32_t crc, uint16_t v) { return _mm_crc32_u16(crc, v); }
uint32_t sse4_2_crc32_u32(uint32_t crc, uint32_t v) { return _mm_crc32_u32(crc, v); }
uint64_t sse4_2_crc32_u64(uint64_t crc, uint64_t v) { return _mm_crc32_u64(crc, v); }
uint32_t sse4_2_crc32_u8(uint32_t crc, uint8_t v) { return _mm_crc32_u8(crc, v); }
